{
    "version": 3,
    "file": "sv_main.js",
    "mappings": "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",
    "sources": [
        "webpack://cools-boilerplate/./src/server/controllers/index.ts",
        "webpack://cools-boilerplate/./src/shared/utils/apx.ts",
        "webpack://cools-boilerplate/webpack/bootstrap",
        "webpack://cools-boilerplate/webpack/runtime/global",
        "webpack://cools-boilerplate/./src/server/server.ts"
    ],
    "sourcesContent": [
        "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst apx_1 = require(\"../../shared/utils/apx\");\r\nlet lobbies = [];\r\n///export let lobbies: { [game: string]: Lobby} = {};\r\n// Lobbies[\"vehicle-tag\"] = {\r\n//     id: \"arcade_lobby_2387423874\",\r\n//     game: \"vehicle-tag\",\r\n//     name: \"BOZOS\",\r\n//     code: \"1234\",\r\n//     source: 1,\r\n//     cid: 1,\r\n//     players: [\r\n//         {\r\n//             cid: 1,\r\n//             source: source,\r\n//             name: user.first_name + \" \" + user.last_name,\r\n//             is_playing: true\r\n//         }\r\n//     ],\r\n//     data: {\r\n//         map: data?.map,\r\n//         vehicle_group: data?.vehicle_group\r\n//     },\r\n//     started: false\r\n// };\r\n// Lobbies[\"vehicle-tag\"] = {\r\n//     id: \"arcade_lobby_1\",\r\n//     game: \"vehicle-tag\",\r\n//     name: \"Cool Lobby\",\r\n//     code: \"1234\",\r\n//     source: 1,\r\n//     cid: 1,\r\n//     players: [],\r\n//     started: false,\r\n// }\r\n/*\r\n        lobbies.push({\r\n            id: randomId,\r\n            game: game,\r\n            name: data.name,\r\n            code: data.code,\r\n            source: source,\r\n            cid: user.id,\r\n            players: [\r\n                {\r\n                    cid: user.id,\r\n                    source: source,\r\n                    name: user.first_name + \" \" + user.last_name,\r\n                    is_playing: true\r\n                }\r\n            ],\r\n            data: {\r\n                map: data?.map,\r\n                vehicle_group: data?.vehicle_group\r\n            },\r\n            started: false\r\n        })\r\n*/\r\n//TODO; Start using interfaces for client/server.\r\napx_1.Procedures.register(\"arp-games:getLobbies\", (source, game) => {\r\n    return lobbies.filter((lobby) => lobby.game === game);\r\n});\r\napx_1.Procedures.register(\"arp-games:createLobby\", async (source, game, data) => {\r\n    const user = await apx_1.Base.getCharacter(source);\r\n    if (!user)\r\n        return false;\r\n    const randomId = \"arcade_lobby_\" + apx_1.Utils.getRandomNumber(1, 99) + apx_1.Utils.getRandomNumber(1, 99) + apx_1.Utils.getRandomNumber(1, 99) + apx_1.Utils.getRandomNumber(1, 99);\r\n    const gameConfigData = getGameData(game);\r\n    if (gameConfigData.type === \"teams\") {\r\n        const teams = [];\r\n        for (let i = 0; i < gameConfigData.gameData.teams; i++) {\r\n            teams.push({\r\n                players: []\r\n            });\r\n        }\r\n        teams[0].players.push({\r\n            cid: user.id,\r\n            source: source,\r\n            name: user.first_name + \" \" + user.last_name,\r\n        });\r\n        lobbies.push({\r\n            id: randomId,\r\n            game: game,\r\n            name: data.name,\r\n            code: data.code,\r\n            source: source,\r\n            cid: user.id,\r\n            players: [\r\n                {\r\n                    cid: user.id,\r\n                    source: source,\r\n                    name: user.first_name + \" \" + user.last_name,\r\n                    is_playing: true\r\n                }\r\n            ],\r\n            data: {\r\n                ...data\r\n            },\r\n            teams: teams,\r\n            started: false\r\n        });\r\n    }\r\n    else {\r\n        // Lobbies[\"vehicle-tag\"] = {\r\n        //     id: randomId,\r\n        //     game: game,\r\n        //     name: data.name,\r\n        //     code: data.code,\r\n        //     source: source,\r\n        //     cid: user.id,\r\n        //     players: [\r\n        //         {\r\n        //             cid: user.id,\r\n        //             source: source,\r\n        //             name: user.first_name + \" \" + user.last_name,\r\n        //             is_playing: true\r\n        //         }\r\n        //     ],\r\n        //     data: {\r\n        //         map: data?.map,\r\n        //         vehicle_group: data?.vehicle_group\r\n        //     },\r\n        //     started: false\r\n        // };\r\n        // Lobbies[\"vehicle-tag\"].find\r\n        lobbies.push({\r\n            id: randomId,\r\n            game: game,\r\n            name: data.name,\r\n            code: data.code,\r\n            source: source,\r\n            cid: user.id,\r\n            players: [\r\n                {\r\n                    cid: user.id,\r\n                    source: source,\r\n                    name: user.first_name + \" \" + user.last_name,\r\n                    is_playing: true\r\n                }\r\n            ],\r\n            data: {\r\n                map: data?.map,\r\n                vehicle_group: data?.vehicle_group\r\n            },\r\n            started: false\r\n        });\r\n    }\r\n    console.log(lobbies);\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === randomId);\r\n    if (!lobby)\r\n        return false;\r\n    apx_1.Events.emitNet(\"arp-games:joinedLobby\", source, lobby);\r\n    return true;\r\n});\r\napx_1.Procedures.register(\"arp-games:getLobby\", (source, game, lobbyId) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    return lobby;\r\n});\r\napx_1.Procedures.register(\"arp-games:getLobbyMembers\", (source, game, lobbyId) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    return lobby.players;\r\n});\r\napx_1.Procedures.register(\"arp-games:getLobbyTeam\", (source, game, lobbyId, team) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    return lobby.teams[team];\r\n});\r\napx_1.Events.onNet(\"arp-games:joinGame\", async (source, game, lobbyId) => {\r\n    console.log(\"arp-games:joinGame\", source, game, lobbyId);\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    const user = await apx_1.Base.getCharacter(source);\r\n    if (!user)\r\n        return false;\r\n    const gameConfigData = getGameData(game);\r\n    lobby.players.push({\r\n        cid: user.id,\r\n        source: source,\r\n        name: user.first_name + \" \" + user.last_name,\r\n        is_playing: true\r\n    });\r\n    if (gameConfigData.type === \"teams\") {\r\n        if (lobby.teams[0].players.length < gameConfigData.gameData.teamSize) {\r\n            lobby.teams[0].players.push({\r\n                cid: user.id,\r\n                source: source,\r\n                name: user.first_name + \" \" + user.last_name,\r\n            });\r\n        }\r\n        else if (lobby.teams[1].players.length < gameConfigData.gameData.teamSize) {\r\n            lobby.teams[1].players.push({\r\n                cid: user.id,\r\n                source: source,\r\n                name: user.first_name + \" \" + user.last_name,\r\n            });\r\n        }\r\n    }\r\n    apx_1.Events.emitNet(\"arp-games:joinedLobby\", source, lobby);\r\n    return true;\r\n});\r\napx_1.Events.onNet(\"arp-games:leaveLobby\", (source, game, lobbyId) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    const gameConfigData = getGameData(game);\r\n    const idx = lobbies.findIndex((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (idx === -1)\r\n        return false;\r\n    lobbies[idx].players = lobbies[idx].players.filter((player) => player.source !== source);\r\n    if (gameConfigData.type === \"teams\") {\r\n        //If the game supports teams, make sure to clear up the teams\r\n        for (let i = 0; i < lobby.teams.length; i++) {\r\n            lobby.teams[i].players = lobby.teams[i].players.filter((player) => player.source !== source);\r\n        }\r\n    }\r\n    apx_1.Events.emitNet(\"arp-games:leftLobby\", source, true);\r\n});\r\napx_1.Events.onNet(\"arp-games:invitePlayers\", async (source, game, lobbyId, cids) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    for (let i = 0; i < cids.length; i++) {\r\n        const player = lobby.players.find((player) => player.cid === cids[i]);\r\n        if (!player) {\r\n            apx_1.Events.emitNet(\"arp-games:invitePlayer\", -1, cids[i], game, lobby.name, lobbyId);\r\n        }\r\n    }\r\n});\r\napx_1.Events.onNet(\"arp-games:kickPlayer\", (source, game, lobbyId, player) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    const gameConfigData = getGameData(game);\r\n    const idx = lobbies.findIndex((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (idx === -1)\r\n        return false;\r\n    const ply = lobby.players.find((ply) => ply.cid === player);\r\n    lobbies[idx].players = lobbies[idx].players.filter((player) => player.cid !== player);\r\n    if (gameConfigData.type === \"teams\") {\r\n        //If the game supports teams, make sure to clear up the teams\r\n        for (let i = 0; i < lobby.teams.length; i++) {\r\n            lobby.teams[i].players = lobby.teams[i].players.filter((player) => player.cid !== player);\r\n        }\r\n    }\r\n    apx_1.Events.emitNet(\"arp-games:leftLobby\", ply.source, false);\r\n});\r\napx_1.Events.onNet(\"arp-games:movePlayerToTeam\", (source, game, lobbyId, team, player) => {\r\n    //Make sure to check if team player count is over the max\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    const ply = lobby.players.find((ply) => ply.cid === player);\r\n    if (!ply)\r\n        return false;\r\n    const gameConfigData = getGameData(game);\r\n    if (lobby.teams[team].players.length + 1 >= gameConfigData.gameData.teamSize)\r\n        return false;\r\n    const newTeam = {\r\n        cid: ply.cid,\r\n        source: ply.source,\r\n        name: ply.name\r\n    };\r\n    for (let i = 0; i < lobby.teams.length; i++) {\r\n        lobby.teams[i].players = lobby.teams[i].players.filter((user) => user.cid !== player);\r\n    }\r\n    const idx = lobbies.findIndex((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (idx === -1)\r\n        return false;\r\n    lobbies[idx].teams[team].players.push(newTeam);\r\n});\r\napx_1.Events.onNet(\"arp-games:startLobby\", (source, game, lobbyId) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    emitNet(\"DoLongHudText\", source, \"Starting game in 5 seconds...\");\r\n    setTimeout(() => {\r\n        lobby.started = true;\r\n        apx_1.Events.emit(\"arp-games:gameStarted\", game, lobby);\r\n        apx_1.Events.emitNet(\"arp-games:gameStarted\", -1, lobbyId);\r\n    }, 5000);\r\n});\r\napx_1.Events.onNet(\"arp-games:endGame\", (source, game, lobbyId) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    lobby.started = false;\r\n    apx_1.Events.emit(\"arp-games:endGameRequested\", game, lobbyId);\r\n});\r\napx_1.Events.on(\"arp-games:completeEnd\", (game, lobbyId) => {\r\n    console.log(\"arp-games:completeEnd\", game, lobbyId);\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    //console.log(\"FOUND LOBBY\")\r\n    for (const player of lobby.players) {\r\n        console.log(\"LEAVE LOBBY\");\r\n        emitNet(\"arp-games:leftLobby\", player.source, true);\r\n    }\r\n    //console.log(\"DELETE LOBBY\")\r\n    //delete lobbies[lobbies.findIndex((lobby: Lobby) => lobby.game === game && lobby.id === lobbyId)];\r\n    //Delete lobby\r\n    lobbies = lobbies.filter((lobby) => lobby.id !== lobbyId);\r\n    console.log(\"Lobby deleted\", lobbies);\r\n});\r\napx_1.Events.on(\"arp-games:gameFinished\", (game, lobbyId, results) => {\r\n    const lobby = lobbies.find((lobby) => lobby.game === game && lobby.id === lobbyId);\r\n    if (!lobby)\r\n        return false;\r\n    for (const player of lobby.players) {\r\n        console.log(\"LEAVE LOBBY\");\r\n        emitNet(\"arp-games:leftLobby\", player.source, false);\r\n    }\r\n    lobbies = lobbies.filter((lobby) => lobby.id !== lobbyId);\r\n});\r\nconst getConfig = (pId) => {\r\n    return global.exports[\"arp-config\"].GetModuleConfig(pId);\r\n};\r\nconst getGameData = (pGame) => {\r\n    const pGames = getConfig(\"arp-games:games\");\r\n    return pGames[\"games\"].find((game) => game.id == pGame);\r\n};\r\n",
        "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Base = exports.Hud = exports.Interface = exports.Utils = exports.Streaming = exports.Zones = exports.Procedures = exports.Events = void 0;\r\nexports.Events = {\r\n    on: (event, callback) => {\r\n        return APX.Events.on(event, callback);\r\n    },\r\n    onNet: (event, callback) => {\r\n        return APX.Events.onNet(event, callback);\r\n    },\r\n    emit: (event, ...args) => {\r\n        return APX.Events.emit(event, ...args);\r\n    },\r\n    emitNet: (event, ...args) => {\r\n        return APX.Events.emitNet(event, ...args);\r\n    },\r\n    remove: (event, callback) => {\r\n        return APX.Events.remove(event, callback);\r\n    }\r\n};\r\nexports.Procedures = {\r\n    register: (name, callback) => {\r\n        return APX.Procedures.register(name, callback);\r\n    },\r\n    execute: (name, ...args) => {\r\n        console.log(\"execute\", name, args);\r\n        return APX.Procedures.execute(name, ...args);\r\n    }\r\n};\r\nexports.Zones = {\r\n    isActive: (zone, data) => {\r\n        return APX.Zones.isActive(zone, data);\r\n    },\r\n    onEnter: (zone, callback) => {\r\n        return APX.Zones.onEnter(zone, callback);\r\n    },\r\n    onExit: (zone, callback) => {\r\n        return APX.Zones.onExit(zone, callback);\r\n    },\r\n    addBoxZone: (id, zone, pCoords, pLength, pWidth, pOptions, pData = {}) => {\r\n        return APX.Zones.addBoxZone(id, zone, pCoords, pLength, pWidth, pOptions, pData);\r\n    },\r\n    addBoxTarget: (id, event, pCoords, pLength, pWidth, pOptions, pData = {}) => {\r\n        return APX.Zones.addBoxTarget(id, event, pCoords, pLength, pWidth, pOptions, pData);\r\n    }\r\n};\r\nexports.Streaming = {\r\n    loadModel: (model) => {\r\n        return APX.Streaming.loadModel(model);\r\n    },\r\n    loadTexture: (texture) => {\r\n        return APX.Streaming.loadTexture(texture);\r\n    },\r\n    loadAnim: (anim) => {\r\n        return APX.Streaming.loadAnim(anim);\r\n    },\r\n    loadClipSet: (clipSet) => {\r\n        return APX.Streaming.loadClipSet(clipSet);\r\n    },\r\n    loadWeaponAsset: (weaponAsset, p1, p2) => {\r\n        return APX.Streaming.loadWeaponAsset(weaponAsset);\r\n    },\r\n    loadNamedPtfxAsset: (asset) => {\r\n        return APX.Streaming.loadNamedPtfxAsset(asset);\r\n    }\r\n};\r\nexports.Utils = {\r\n    cache: (callback, options) => {\r\n        return APX.Utils.cache(callback, options);\r\n    },\r\n    cacheableMap: (callback, options) => {\r\n        return APX.Utils.cacheableMap(callback, options);\r\n    },\r\n    waitForCondition: (condition, timeout) => {\r\n        return APX.Utils.waitForCondition(condition, timeout);\r\n    },\r\n    getMapRange: (p1, p2, p3) => {\r\n        return APX.Utils.getMapRange(p1, p2, p3);\r\n    },\r\n    getDistance: ([x1, y1, z1], [x2, y2, z2]) => {\r\n        return APX.Utils.getDistance([x1, y1, z1], [x2, y2, z2]);\r\n    },\r\n    getRandomNumber: (min, max) => {\r\n        return APX.Utils.getRandomNumber(min, max);\r\n    }\r\n};\r\nexports.Interface = {\r\n    addPeekEntryByModel: (model, data, options) => {\r\n        return APX.Interface.addPeekEntryByModel(model, data, options);\r\n    },\r\n    addPeekEntryByTarget: (event, data, options) => {\r\n        return APX.Interface.addPeekEntryByTarget(event, data, options);\r\n    },\r\n    addPeekEntryByFlag: (flag, data, options) => {\r\n        return APX.Interface.addPeekEntryByFlag(flag, data, options);\r\n    },\r\n    taskbar: (length, name, runCheck = false, moveCheck = null) => {\r\n        return APX.Interface.taskbar(length, name, runCheck, moveCheck);\r\n    },\r\n    phoneConfirmation: (title, text, timeout = 30, icon = undefined) => {\r\n        return APX.Interface.phoneConfirmation(timeout, title, text, \"home\");\r\n    },\r\n    phoneNotification: (app, title, body, showEvenIfActive = true) => {\r\n        return APX.Interface.phoneNotification(app, title, body, showEvenIfActive);\r\n    }\r\n};\r\nexports.Hud = {\r\n    createBlip: (type, ...args) => {\r\n        return APX.Hud.createBlip(type, ...args);\r\n    },\r\n    applyBlipSettings: (blip, p1, p2, p3, p4, p5, p6, p7) => {\r\n        return APX.Hud.applyBlipSettings(blip, p1, p2, p3, p4, p5, p6, p7);\r\n    }\r\n};\r\nexports.Base = {\r\n    getCharacter: async (pSource) => {\r\n        return await global.exports[\"arp-lib\"].getCharacter(pSource);\r\n    }\r\n};\r\n",
        "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n",
        "__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();",
        "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nrequire(\"./controllers/index\");\r\nrequire(\"./controllers/events\");\r\n"
    ],
    "names": [
        "Object",
        "defineProperty",
        "exports",
        "value",
        "apx_1",
        "lobbies",
        "Procedures",
        "register",
        "source",
        "game",
        "filter",
        "lobby",
        "async",
        "data",
        "user",
        "Base",
        "getCharacter",
        "randomId",
        "Utils",
        "getRandomNumber",
        "gameConfigData",
        "getGameData",
        "type",
        "teams",
        "i",
        "gameData",
        "push",
        "players",
        "cid",
        "id",
        "name",
        "first_name",
        "last_name",
        "code",
        "is_playing",
        "started",
        "map",
        "vehicle_group",
        "console",
        "log",
        "find",
        "Events",
        "emitNet",
        "lobbyId",
        "team",
        "onNet",
        "length",
        "teamSize",
        "idx",
        "findIndex",
        "player",
        "cids",
        "ply",
        "newTeam",
        "setTimeout",
        "emit",
        "on",
        "results",
        "pGame",
        "g",
        "GetModuleConfig",
        "Hud",
        "Interface",
        "Streaming",
        "Zones",
        "event",
        "callback",
        "APX",
        "args",
        "remove",
        "execute",
        "isActive",
        "zone",
        "onEnter",
        "onExit",
        "addBoxZone",
        "pCoords",
        "pLength",
        "pWidth",
        "pOptions",
        "pData",
        "addBoxTarget",
        "loadModel",
        "model",
        "loadTexture",
        "texture",
        "loadAnim",
        "anim",
        "loadClipSet",
        "clipSet",
        "loadWeaponAsset",
        "weaponAsset",
        "p1",
        "p2",
        "loadNamedPtfxAsset",
        "asset",
        "cache",
        "options",
        "cacheableMap",
        "waitForCondition",
        "condition",
        "timeout",
        "getMapRange",
        "p3",
        "getDistance",
        "x1",
        "y1",
        "z1",
        "x2",
        "y2",
        "z2",
        "min",
        "max",
        "addPeekEntryByModel",
        "addPeekEntryByTarget",
        "addPeekEntryByFlag",
        "flag",
        "taskbar",
        "runCheck",
        "moveCheck",
        "phoneConfirmation",
        "title",
        "text",
        "icon",
        "phoneNotification",
        "app",
        "body",
        "showEvenIfActive",
        "createBlip",
        "applyBlipSettings",
        "blip",
        "p4",
        "p5",
        "p6",
        "p7",
        "pSource",
        "__webpack_module_cache__",
        "__webpack_require__",
        "moduleId",
        "cachedModule",
        "undefined",
        "module",
        "__webpack_modules__",
        "globalThis",
        "this",
        "Function",
        "e",
        "window"
    ],
    "sourceRoot": ""
}